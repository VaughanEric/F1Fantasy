[{"/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/index.js":"1","/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/components/App.js":"2","/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/components/Title.js":"3","/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/components/Chart.js":"4","/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/components/Poll.js":"5","/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/services/mongodbUpdate.js":"6","/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/services/fantasyapiRetrieve.js":"7","/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/services/mongodbRetrieve.js":"8"},{"size":205,"mtime":1627669884621,"results":"9","hashOfConfig":"10"},{"size":196,"mtime":1628002762634,"results":"11","hashOfConfig":"10"},{"size":336,"mtime":1628002764140,"results":"12","hashOfConfig":"10"},{"size":9868,"mtime":1628719906965,"results":"13","hashOfConfig":"10"},{"size":6421,"mtime":1628721563728,"results":"14","hashOfConfig":"10"},{"size":340,"mtime":1628722827732,"results":"15","hashOfConfig":"10"},{"size":220,"mtime":1628034021004,"results":"16","hashOfConfig":"10"},{"size":325,"mtime":1628722836352,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"b1xlta",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/index.js",[],["36","37"],"/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/components/App.js",[],"/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/components/Title.js",[],"/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/components/Chart.js",[],"/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/components/Poll.js",["38"],"import React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nimport mongodbUpdate from '../services/mongodbUpdate';\nimport mongodbRetrieve from '../services/mongodbRetrieve';\n\n\nfunction Poll(props) {\n    let playerClass = props.playerClass\n    let idNames = props.idNames;\n    let submitIdName = props.submitIdName;\n    let displayNames = props.displayNames;\n    let position = props.position;\n    const [playerNames, setPlayerNames] = useState([]);\n    const [playerPercentages, setPlayerPercentages] = useState([]);\n    const [colors, setColors] = useState([]);\n    const [bgColors, setBgColors] = useState([]);\n\n    useEffect(() => {\n        console.log(\"Values changed\", props.idNames);\n        getDataOnLoad();\n    }, [props.idNames]);\n    \n    async function getDataOnLoad() {\n        let response = await mongodbRetrieve(playerClass, idNames);\n        setPlayerNames(response.data.data.playerData.names);\n        setPlayerPercentages(response.data.data.playerData.percentages);\n        setColors(response.data.data.playerData.colors);\n        setBgColors(response.data.data.playerData.bgColors);\n    }\n\n    function playerClick(button) {\n        if (button.classList.contains('active')) {\n            button.classList.remove('active');\n        } else {\n            button.classList.add('active');\n        }\n    }\n\n    async function submitClick() {\n        let buttons = [];\n        let activeButtonIds = [];\n        buttons = document.getElementsByClassName(playerClass);\n\n        for(let i = 0; i < buttons.length; i++) {\n            if (buttons[i].classList.contains('active')) {\n                activeButtonIds.push(buttons[i].id);\n                buttons[i].classList.remove('active');\n            }\n        }\n        await mongodbUpdate(activeButtonIds, playerClass);\n        \n        // There is a latency for which I cannot account, even after consulting with a professional in the field.\n        // The function above updates the database, but the retrieval function pulls data from the database before the update function finishes despite using the keyword await.\n        // This could simply be a side effect of me using the free version of mongoDB.\n        // Thus, at least for now, I am using setTimeout.\n        setTimeout(async function() {\n            let response = await mongodbRetrieve(playerClass, idNames);\n            setPlayerNames(response.data.data.playerData.names);\n            setPlayerPercentages(response.data.data.playerData.percentages);\n            setColors(response.data.data.playerData.colors);\n            setBgColors(response.data.data.playerData.bgColors);\n        }, 150);\n    }\n\n    console.log(playerPercentages);\n\n    let dataset = [{\n        axis: 'y',\n        label: '',\n        data: playerPercentages,\n        backgroundColor: bgColors,\n        borderColor: colors,\n        borderWidth: 2\n    }]\n\n    let options = {\n        indexAxis: 'y',\n        plugins: {\n            legend: {\n                display: false,\n            },\n            tooltip: {\n                callbacks: {\n                    label: function(context) {\n                        let label = context.parsed.x + '% of Community';\n                        return label;\n                    }\n                }\n            }\n        },\n        scales: {\n            x: {\n                title: {\n                    display: false,\n                    text: `% of Community that Deems ${position} as Valuable`,\n                    padding: 20,\n                    color: 'rgb(255, 255, 255)',\n                    font: {\n                        family: \"'Titillium Web', sans-serif\",\n                        weight: \"400\",\n                        size: 20\n                    }\n                },\n                ticks: {\n                    callback: function(value) {\n                        return value + '%';\n                    },\n                    font: {\n                        family: \"'Titillium Web', sans-serif\",\n                        weight: \"400\",\n                        size: 15\n                    }\n                },\n                grid: {\n                    color: 'rgba(101,101,101, 0.1)'\n                },\n                position: \"top\"\n                \n            },\n            y: {\n                title: {\n                    display: false\n                },\n                ticks: {\n                    font: {\n                        family: \"'Titillium Web', sans-serif\",\n                        weight: \"400\",\n                        size: 15\n                    }\n                },\n                grid: {\n                    color: \"rgba(101,101,101, 0.1)\"\n                }\n            }\n        },\n        maintainAspectRatio: false\n    }\n\n    const data = {\n        labels: playerNames,\n        datasets: dataset\n    }\n\n    return (\n        <div className=\"poll-section\">\n            <h2 className=\"poll-title\">F1 Community on {position}s' Value</h2>\n            <div className=\"poll\"> \n                <h3 className=\"poll-question\">Which {position}s currently have the best value?</h3>\n                <form className=\"form\">\n                    <button id={idNames[0]} className={`custom-btn first-btn ${playerClass}`} type=\"button\" value={idNames[0]} onClick={() => playerClick(document.getElementById(idNames[0]))}>{displayNames[0]}</button>\n                    {(displayNames.slice(1, displayNames.length - 1)).map((name, index) => (\n                        <button id={idNames[index + 1]} className={`custom-btn ${playerClass}`} type=\"button\" value={name} onClick={() => playerClick(document.getElementById(idNames[index + 1]))}>{name}</button>\n                    ))}\n                    <button id={idNames[idNames.length - 1]} className={`custom-btn last-btn ${playerClass}`} type=\"button\" value={idNames[idNames.length - 1]} onClick={() => playerClick(document.getElementById(idNames[idNames.length - 1]))}>{displayNames[idNames.length - 1]}</button>\n                </form>\n                <button id={submitIdName} className=\"submit-btn\" type=\"submit\" onClick={submitClick}>Submit</button>\n            </div>\n            <div id={position} className=\"results\">\n                <h3 className=\"results-axis\">% of Community that Deems Each {position} as Valuable</h3>\n                <Bar data={data} options={options} />\n                <br></br>\n            </div>\n        </div>\n    )\n}\n\nexport default Poll;","/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/services/mongodbUpdate.js",[],"/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/services/fantasyapiRetrieve.js",[],"/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/services/mongodbRetrieve.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":22,"column":8,"nodeType":"45","endLine":22,"endColumn":23,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getDataOnLoad'. Either include it or remove the dependency array.","ArrayExpression",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [getDataOnLoad, props.idNames]",{"range":"52","text":"53"},[754,769],"[getDataOnLoad, props.idNames]"]