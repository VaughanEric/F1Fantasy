[{"/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/index.js":"1","/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/components/App.js":"2","/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/components/Title.js":"3","/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/components/Chart.js":"4","/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/components/Poll.js":"5","/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/services/mongodbUpdate.js":"6","/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/services/fantasyapiRetrieve.js":"7","/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/services/mongodbRetrieve.js":"8"},{"size":205,"mtime":1627669884621,"results":"9","hashOfConfig":"10"},{"size":196,"mtime":1628002762634,"results":"11","hashOfConfig":"10"},{"size":336,"mtime":1628002764140,"results":"12","hashOfConfig":"10"},{"size":9753,"mtime":1628034078636,"results":"13","hashOfConfig":"10"},{"size":4689,"mtime":1628120620039,"results":"14","hashOfConfig":"10"},{"size":273,"mtime":1628122248466,"results":"15","hashOfConfig":"10"},{"size":220,"mtime":1628034021004,"results":"16","hashOfConfig":"10"},{"size":212,"mtime":1628121020970,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"b1xlta",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/index.js",[],["37","38"],"/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/components/App.js",[],"/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/components/Title.js",[],"/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/components/Chart.js",["39"],"import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\n\nimport Poll from './Poll';\nimport fantasyapiRetrieve from '../services/fantasyapiRetrieve';\n\nfunction Chart() {\n    const [weeks, setWeeks] = useState([]);\n    const [drNames, setDrNames] = useState([]);\n    const [drLNames, setDrLNames] = useState([]);\n    const [drPriceHistories, setDrPriceHistories] = useState([]);\n    const [drColors, setDrColors] = useState([]);\n    const [drBgColors, setDrBgColors] = useState([]);\n    const [drDashes, setDrDashes] = useState([]);\n    const [crNames, setCrNames] = useState([]);\n    const [crPriceHistories, setCrPriceHistories] = useState([]);\n    const [crColors, setCrColors] = useState([]);\n    const [crBgColors, setCrBgColors] = useState([]);\n    const [crTeamAbbr, setCrTeamAbbr] = useState([]);\n\n    async function getApiData() {\n        const response = await fantasyapiRetrieve();\n        setWeeks(response.data.weeks);\n        setDrNames(response.data.drNames);\n        setDrLNames(response.data.drLNames);\n        setDrPriceHistories(response.data.drPriceHistories);\n        setDrColors(response.data.drColors);\n        setDrBgColors(response.data.drBgColors);\n        setDrDashes(response.data.drDashes);\n        setCrNames(response.data.crNames);\n        setCrPriceHistories(response.data.crPriceHistories);\n        setCrColors(response.data.crColors);\n        setCrBgColors(response.data.crBgColors);\n        setCrTeamAbbr(response.data.crTeamAbbr);\n    }\n\n    useEffect(() => {\n        getApiData();\n    }, []);\n\n    const drPollData = [95, 90, 85, 80, 75, 70, 65, 60, 50, 55, 45, 40, 35, 25, 30, 25, 20, 15, 10, 5];\n    const crPollData = [95, 50, 80, 75, 45, 40, 35, 30, 10, 5];\n\n\n    let drDatasets = []\n    for(let i = 0; i < drNames.length; i++) {\n        drDatasets.push({\n            label: drNames[i],\n            data: drPriceHistories[i],\n            backgroundColor: drBgColors[i],\n            borderColor: drColors[i],\n            borderDash: drDashes[i], \n            borderWidth: 1.5,\n            pointBackgroundColor: drColors[i]\n        });\n    }\n\n    let drOptions = {\n        plugins: {\n            title: {\n                display: true,\n                fullSize: false,\n                padding: 30,\n                text: \"Drivers' Price Per Round\",\n                color: \"rgb(0, 0, 0)\",\n                font: {\n                    family: \"'Titillium Web', sans-serif\",\n                    weight: \"700\",\n                    size: 30\n                }\n            },\n            legend: {\n                display: true,\n                fullSize: false,\n                title: {\n                    display: true,\n                    text: \"Drivers (Most to Least Fantasy Points)\",\n                    color: \"rgb(0, 0, 0)\",\n                    font: {\n                        family: \"'Titillium Web', sans-serif\",\n                        weight: \"400\",\n                        style: \"italic\",\n                        size: 20\n                    }\n                },\n                labels: {\n                    boxWidth: 12,\n                    boxHeight: 12,\n                    padding: 20,\n                    font: {\n                        family: \"'Titillium Web', sans-serif\",\n                        weight: \"400\",\n                    }\n                }\n            },\n            tooltip: {\n                callbacks: {\n                    title: function(context) { \n                        return \"Round \" + context[0].label;\n                    },\n                    label: function(context) {\n                        let label = context.dataset.label + \": \";\n                        label += ('$' + context.parsed.y + \" M\");\n                        return label;\n                    }\n                }\n            }\n        },\n        scales: {\n            x: {\n                title: {\n                    display: true,\n                    text: \"Rounds\",\n                    padding: 20,\n                    color: \"rgb(0, 0, 0)\",\n                    font: {\n                        family: \"'Titillium Web', sans-serif\",\n                        weight: \"400\",\n                        size: 20\n                    }\n                },\n                ticks: {\n                    font: {\n                        family: \"'Titillium Web', sans-serif\",\n                        weight: \"400\",\n                        size: 15\n                    }\n                }\n            },\n            y: {\n                title: {\n                    display: true,\n                    text: \"Price (Millions of $)\",\n                    padding: 20,\n                    color: \"rgb(0, 0, 0)\",\n                    font: {\n                        family: \"'Titillium Web', sans-serif\",\n                        weight: \"400\",\n                        size: 20\n                    }\n                },\n                ticks: {\n                    callback: function(value) {\n                        return '$' + value;\n                    },\n                    font: {\n                        family: \"'Titillium Web', sans-serif\",\n                        weight: \"400\",\n                        size: 15\n                    }\n                },\n                min: 0,\n                max: 35\n            }\n        },\n        aspectRatio: 1.5\n    }\n\n    const drData = {\n        labels: weeks,\n        datasets: drDatasets\n    };\n\n    let crDatasets = []\n    for(let i = 0; i < crNames.length; i++) {\n        crDatasets.push({\n            label: crNames[i],\n            data: crPriceHistories[i],\n            backgroundColor: crBgColors[i],\n            borderColor: crColors[i],\n            borderWidth: 1.5,\n            pointBackgroundColor: crColors[i]\n        });\n    }\n\n    let crOptions = {\n        plugins: {\n            title: {\n                display: true,\n                fullSize: false,\n                padding: 30,\n                text: \"Constructors' Price Per Round\",\n                color: \"rgb(0, 0, 0)\",\n                font: {\n                    family: \"'Titillium Web', sans-serif\",\n                    weight: \"700\",\n                    size: 30\n                }\n            },\n            legend: {\n                display: true,\n                fullSize: false,\n                title: {\n                    display: true,\n                    text: \"Constructors (Most to Least Fantasy Points)\",\n                    color: \"rgb(0, 0, 0)\",\n                    font: {\n                        family: \"'Titillium Web', sans-serif\",\n                        weight: \"400\",\n                        style: \"italic\",\n                        size: 20\n                    }\n                },\n                labels: {\n                    boxWidth: 12,\n                    boxHeight: 12,\n                    padding: 20,\n                }\n            },\n            tooltip: {\n                callbacks: {\n                    title: function(context) { \n                        return \"Round \" + context[0].label;\n                    },\n                    label: function(context) {\n                        let label = context.dataset.label + \": \";\n                        label += ('$' + context.parsed.y + \" M\");\n                        return label;\n                    }\n                }\n            }\n        },\n        scales: {\n            x: {\n                title: {\n                    display: true,\n                    text: \"Rounds\",\n                    padding: 20,\n                    color: \"rgb(0, 0, 0)\",\n                    font: {\n                        family: \"'Titillium Web', sans-serif\",\n                        weight: \"400\",\n                        size: 20\n                    }\n                },\n                ticks: {\n                    font: {\n                        family: \"'Titillium Web', sans-serif\",\n                        weight: \"400\",\n                        size: 15\n                    }\n                }\n            },\n            y: {\n                title: {\n                    display: true,\n                    text: \"Price (Millions of $)\",\n                    padding: 20,\n                    color: \"rgb(0, 0, 0)\",\n                    font: {\n                        family: \"'Titillium Web', sans-serif\",\n                        weight: \"400\",\n                        size: 20\n                    }\n                },\n                ticks: {\n                    callback: function(value) {\n                        return '$' + value;\n                    },\n                    font: {\n                        family: \"'Titillium Web', sans-serif\",\n                        weight: \"400\",\n                        size: 15\n                    }\n                },\n                min: 0,\n                max: 40\n            }\n        },\n        aspectRatio: 1.5\n    }\n\n    const crData = {\n        labels: weeks,\n        datasets: crDatasets\n    }\n\n    return (\n        <div>\n            <div className=\"chart\"> \n                <Line data={drData} options={drOptions} />\n            </div>\n            <Poll \n                data={drPollData}\n                idNames={drLNames} \n                displayNames={drNames} \n                colors={drColors} \n                bgColors={drBgColors} \n                position={\"Driver\"} \n            />\n            <div className=\"chart\">\n                <Line data={crData} options={crOptions} />\n            </div>\n            <Poll\n                data={crPollData}\n                idNames={crTeamAbbr} \n                displayNames={crNames} \n                colors={crColors} \n                bgColors={crBgColors} \n                position={\"Constructor\"} \n            />\n        </div>\n    );\n}\n\nexport default Chart;","/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/components/Poll.js",[],"/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/services/mongodbUpdate.js",["40"],"import axios from 'axios';\n\nasync function mongodbUpdate(activeButtonIds) {\n    const requestObj = {\n        \"buttons\": activeButtonIds\n    }\n    const response = await axios.post('http://localhost:5000/mongodb-players/update', requestObj);\n}\n\nexport default mongodbUpdate;","/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/services/fantasyapiRetrieve.js",[],"/Users/ericvaughan/Desktop/Web-Dev/Web-Dev-Projects/f1-fantasy/frontend/src/services/mongodbRetrieve.js",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":3,"column":8,"nodeType":"47","messageId":"48","endLine":3,"endColumn":13},{"ruleId":"45","severity":1,"message":"49","line":7,"column":11,"nodeType":"47","messageId":"48","endLine":7,"endColumn":19},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]